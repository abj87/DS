class Solution {
public:
    
    
    void leftTraverse(Node* root, vector<int>& ans){
        if(root == NULL)
            return;
        
        while(root->left or root->right){
            ans.push_back(root->data);
            if(root->left)
                root = root->left;
            else root = root->right;
        }
    }
    void leafTraverse(Node* root, vector<int>& ans, Node* originalRoot){
        if(root == NULL)
            return;
            
        leafTraverse(root->left, ans, originalRoot);
        if(root != originalRoot and root->left == NULL and root->right == NULL)
            ans.push_back(root->data);
        leafTraverse(root->right, ans, originalRoot);
    }
    void rightTraverse(Node* root, vector<int>& right){
        if(root == NULL)
            return;
        while(root->left or root->right){
            right.push_back(root->data);
            if(root->right)
                root = root->right;
            else root = root->left;
        }
    }
    vector <int> boundary(Node *root)
    {//Your code here
        vector<int> ans, right;
        if(root == NULL)
            return ans;
        ans.push_back(root->data);
        leftTraverse(root->left, ans); // dont include leftmost Node, we will include in next step 
        leafTraverse(root, ans, root); // include all leaf nodes
        rightTraverse(root->right, right); // Cont include rightmost leaf node, we have included in previous step
        for(int i = right.size() - 1; i >= 0; i--){
            ans.push_back(right[i]);
        }
        
        return ans;
    }
};